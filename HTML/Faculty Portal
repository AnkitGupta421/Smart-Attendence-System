Faculty portal where Faculty can enter students Attendance by using face detection 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Attendify - Faculty Portal</title>
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc; /* A very light gray */
        }
        /* Custom styles for video element to maintain aspect ratio */
        .camera-feed {
            width: 100%;
            max-width: 640px;
            aspect-ratio: 16 / 9;
            object-fit: cover;
            border-radius: 0.5rem;
            transform: scaleX(-1); /* Mirror effect */
        }
        /* Style for the captured image thumbnail */
        .log-thumbnail {
            width: 60px;
            height: 45px;
            object-fit: cover;
            border-radius: 0.25rem;
            transform: scaleX(-1);
        }
    </style>
</head>
<body class="flex flex-col items-center min-h-screen">

    <!-- Header -->
    <header class="w-full bg-white shadow-md">
        <div class="container mx-auto px-4 py-4 flex justify-between items-center">
            <!-- Left Side: Logo and Title -->
            <div class="flex items-center gap-4">
                <h1 class="text-2xl font-bold text-slate-800">
                    <i class="fas fa-user-check text-blue-600"></i>
                    Attendify
                </h1>
            </div>
            
            <!-- Right Side: Logout Button -->
            <a href="#" id="logout-btn" class="flex items-center gap-2 px-3 py-2 rounded-lg text-slate-600 hover:bg-slate-100 hover:text-blue-700 transition-colors font-medium">
                <i class="fas fa-sign-out-alt"></i>
                <span class="hidden sm:inline">Logout</span>
            </a>
        </div>
    </header>

    <main class="container mx-auto p-4 md:p-8 flex-grow w-full">

        <!-- Centered Title -->
        <div class="text-center mb-8">
            <h2 class="text-3xl font-bold text-slate-700 tracking-tight">Faculty Portal</h2>
        </div>

        <!-- Step 1: Slot Selection -->
        <div id="slot-selection-section" class="max-w-xl mx-auto bg-white p-8 rounded-lg shadow-lg text-center">
            <i class="fas fa-clock text-4xl text-blue-500 mb-4"></i>
            <h2 class="text-2xl font-bold text-slate-800 mb-2">Select Class Slot</h2>
            <p class="text-slate-500 mb-6">Choose the class and time slot to begin taking attendance.</p>
            <div class="w-full mb-6">
                <select id="class-slot-select" class="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition">
                    <option value="">-- Select a Slot --</option>
                    <option value="CS101 - Intro to Programming (9:00 AM - 10:00 AM)">CS101 - Intro to Programming (9:00 AM - 10:00 AM)</option>
                    <option value="MA203 - Linear Algebra (10:30 AM - 11:30 AM)">MA203 - Linear Algebra (10:30 AM - 11:30 AM)</option>
                    <option value="PHY110 - Classical Mechanics (1:00 PM - 2:00 PM)">PHY110 - Classical Mechanics (1:00 PM - 2:00 PM)</option>
                    <option value="CHM321 - Organic Chemistry (2:30 PM - 3:30 PM)">CHM321 - Organic Chemistry (2:30 PM - 3:30 PM)</option>
                </select>
                <p id="slot-error" class="text-red-500 text-sm mt-2 hidden">Please select a valid class slot.</p>
            </div>
            <button id="start-session-btn" class="w-full bg-blue-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-700 transition-transform transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <i class="fas fa-arrow-right mr-2"></i>
                Proceed
            </button>
        </div>

        <!-- Step 2: Attendance Taking Section (Initially Hidden) -->
        <div id="attendance-taking-section" class="hidden">
            <div class="text-center mb-6">
                <h2 class="text-2xl font-bold text-slate-800">Attendance Taking</h2>
                <p id="current-class-info" class="text-slate-600 font-medium"></p>
            </div>

            <div class="flex flex-col lg:flex-row gap-8">
                <!-- Left Side: Camera and Controls -->
                <div class="w-full lg:w-1/2 bg-white p-6 rounded-lg shadow-lg flex flex-col items-center">
                    <h3 class="text-lg font-semibold text-slate-700 mb-4">Live Camera Feed</h3>
                    <div class="w-full max-w-xl bg-slate-800 rounded-lg overflow-hidden relative flex items-center justify-center aspect-video">
                        <video id="camera-feed" class="camera-feed" autoplay playsinline muted></video>
                        <div id="camera-status" class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 text-white">
                           <p>Camera is starting...</p>
                        </div>
                    </div>
                    <div class="mt-6 flex gap-4 w-full">
                         <button id="capture-btn" disabled class="flex-grow bg-green-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-600 transition disabled:bg-slate-300 disabled:cursor-not-allowed flex items-center justify-center gap-2">
                            <i class="fas fa-id-card"></i>
                            Capture Attendance
                        </button>
                        <button id="end-session-btn" class="flex-grow bg-red-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-600 transition flex items-center justify-center gap-2">
                           <i class="fas fa-stop-circle"></i>
                            End Session
                        </button>
                    </div>
                </div>

                <!-- Right Side: Attendance Log -->
                <div class="w-full lg:w-1/2 bg-white p-6 rounded-lg shadow-lg">
                    <h3 class="text-lg font-semibold text-slate-700 mb-4">Attendance Log</h3>
                    <div class="h-96 overflow-y-auto border rounded-lg">
                        <table class="min-w-full divide-y divide-slate-200">
                            <thead class="bg-slate-50 sticky top-0">
                                <tr>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Photo</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Student ID</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Name</th>
                                    <th class="px-4 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Time</th>
                                </tr>
                            </thead>
                            <tbody id="attendance-log-body" class="bg-white divide-y divide-slate-200">
                                <tr id="no-entries-row">
                                    <td colspan="4" class="px-4 py-6 text-center text-slate-500">No students marked present yet.</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Step 3: Session Summary (Initially Hidden) -->
        <div id="session-summary-section" class="hidden max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            <div class="text-center mb-6">
                <i class="fas fa-clipboard-check text-4xl text-blue-500 mb-4"></i>
                <h2 class="text-2xl font-bold text-slate-800">Session Summary</h2>
                <p id="summary-class-info" class="text-slate-600 font-medium"></p>
                <p id="summary-date" class="text-sm text-slate-500"></p>
            </div>

            <!-- Stats -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-8 text-center">
                <div class="bg-green-100 p-6 rounded-lg">
                    <p class="text-4xl font-bold text-green-700" id="present-count">0</p>
                    <p class="text-lg font-semibold text-green-800">Present</p>
                </div>
                <div class="bg-red-100 p-6 rounded-lg">
                    <p class="text-4xl font-bold text-red-700" id="absent-count">0</p>
                    <p class="text-lg font-semibold text-red-800">Absent</p>
                </div>
            </div>

            <!-- Student Lists -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                    <h3 class="text-lg font-semibold text-slate-700 mb-4 border-b pb-2">Present Students</h3>
                    <ul id="present-students-list" class="space-y-2 max-h-60 overflow-y-auto pr-2">
                        <!-- JS will populate this -->
                    </ul>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-slate-700 mb-4 border-b pb-2">Absent Students</h3>
                    <ul id="absent-students-list" class="space-y-2 max-h-60 overflow-y-auto pr-2">
                        <!-- JS will populate this -->
                    </ul>
                </div>
            </div>

            <div class="mt-8 text-center" id="summary-buttons">
                <!-- JS will populate this -->
            </div>
        </div>

        <!-- Step 4: Attendance History (Initially Hidden) -->
        <div id="attendance-history-section" class="hidden max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            <div class="text-center mb-6">
                <i class="fas fa-calendar-alt text-4xl text-blue-500 mb-4"></i>
                <h2 class="text-2xl font-bold text-slate-800">Attendance History</h2>
                <p id="history-class-info" class="text-slate-600 font-medium"></p>
            </div>

            <div class="mb-6 text-center">
                <button id="todays-class-btn" class="w-full sm:w-auto bg-green-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition-transform transform hover:scale-105">
                    <i class="fas fa-calendar-day mr-2"></i>
                    Go to Today's Class
                </button>
            </div>

            <div class="overflow-y-auto border rounded-lg max-h-80">
                <table class="min-w-full divide-y divide-slate-200">
                    <thead class="bg-slate-50 sticky top-0">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Date</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Present</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Absent</th>
                        </tr>
                    </thead>
                    <tbody id="history-log-body" class="bg-white divide-y divide-slate-200">
                        <!-- JS will populate this -->
                    </tbody>
                </table>
            </div>

             <div class="mt-8 text-center">
                <button id="home-btn" class="bg-slate-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-slate-700 transition-transform transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500">
                    <i class="fas fa-chevron-left mr-2"></i>
                    Change Class
                </button>
            </div>
        </div>

        <!-- Step 5: Modify Attendance (Initially Hidden) -->
        <div id="modify-attendance-section" class="hidden max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-lg">
            <div class="text-center mb-6">
                <i class="fas fa-edit text-4xl text-blue-500 mb-4"></i>
                <h2 class="text-2xl font-bold text-slate-800">Modify Attendance</h2>
                <p id="modify-class-info" class="text-slate-600 font-medium"></p>
                <p id="modify-date" class="text-sm text-slate-500"></p>
            </div>

             <!-- Student Lists for Modification -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                    <h3 class="text-lg font-semibold text-green-700 mb-4 border-b pb-2">Present</h3>
                    <ul id="modify-present-list" class="space-y-2 max-h-60 overflow-y-auto pr-2"></ul>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-red-700 mb-4 border-b pb-2">Absent</h3>
                    <ul id="modify-absent-list" class="space-y-2 max-h-60 overflow-y-auto pr-2"></ul>
                </div>
            </div>

            <div class="mt-8 text-center flex justify-center gap-4">
                 <button id="cancel-modify-btn" class="bg-slate-500 text-white font-bold py-3 px-8 rounded-lg hover:bg-slate-600 transition">Cancel</button>
                <button id="save-changes-btn" class="bg-green-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition">Save Changes</button>
            </div>
        </div>
    </main>

    <script>
        // DOM Elements
        const slotSelectionSection = document.getElementById('slot-selection-section');
        const attendanceTakingSection = document.getElementById('attendance-taking-section');
        const sessionSummarySection = document.getElementById('session-summary-section');
        const attendanceHistorySection = document.getElementById('attendance-history-section');
        const modifyAttendanceSection = document.getElementById('modify-attendance-section');

        const classSlotSelect = document.getElementById('class-slot-select');
        const startSessionBtn = document.getElementById('start-session-btn');
        const endSessionBtn = document.getElementById('end-session-btn');
        const homeBtn = document.getElementById('home-btn');
        const captureBtn = document.getElementById('capture-btn');
        const cameraFeed = document.getElementById('camera-feed');
        const cameraStatus = document.getElementById('camera-status');
        const currentClassInfo = document.getElementById('current-class-info');
        const attendanceLogBody = document.getElementById('attendance-log-body');
        const noEntriesRow = document.getElementById('no-entries-row');
        const slotError = document.getElementById('slot-error');
        const logoutBtn = document.getElementById('logout-btn');
        
        // Summary elements
        const summaryClassInfo = document.getElementById('summary-class-info');
        const summaryDate = document.getElementById('summary-date');
        const presentCountEl = document.getElementById('present-count');
        const absentCountEl = document.getElementById('absent-count');
        const presentStudentsList = document.getElementById('present-students-list');
        const absentStudentsList = document.getElementById('absent-students-list');
        const summaryButtons = document.getElementById('summary-buttons');
        
        // History elements
        const historyClassInfo = document.getElementById('history-class-info');
        const historyLogBody = document.getElementById('history-log-body');
        const todaysClassBtn = document.getElementById('todays-class-btn');

        // Modify elements
        const modifyClassInfo = document.getElementById('modify-class-info');
        const modifyDate = document.getElementById('modify-date');
        const modifyPresentList = document.getElementById('modify-present-list');
        const modifyAbsentList = document.getElementById('modify-absent-list');
        const saveChangesBtn = document.getElementById('save-changes-btn');
        const cancelModifyBtn = document.getElementById('cancel-modify-btn');


        // --- State ---
        let videoStream = null;
        let presentStudents = [];
        let currentRoster = [];
        let modifyingDate = null; // To track which date's record is being modified

        // Mock class roster data for simulation
        const classRosters = {
            'CS101 - Intro to Programming (9:00 AM - 10:00 AM)': [
                { id: 'S001', name: 'Alice Johnson' }, { id: 'S002', name: 'Bob Williams' },
                { id: 'S003', name: 'Charlie Brown' }, { id: 'S004', name: 'Diana Miller' },
                { id: 'S005', name: 'Ethan Davis' }, { id: 'S006', name: 'Fiona Green' },
                { id: 'S007', name: 'George Harris' }, { id: 'S008', name: 'Hannah Clark' },
            ],
            'MA203 - Linear Algebra (10:30 AM - 11:30 AM)': [
                { id: 'S009', name: 'Ivy Lewis' }, { id: 'S010', name: 'Jack Robinson' },
                { id: 'S011', name: 'Karen Walker' }, { id: 'S012', name: 'Leo Young' },
            ],
             'PHY110 - Classical Mechanics (1:00 PM - 2:00 PM)': [
                { id: 'S001', name: 'Alice Johnson' }, { id: 'S004', name: 'Diana Miller' },
                { id: 'S008', name: 'Hannah Clark' }, { id: 'S011', name: 'Karen Walker' },
             ],
            'CHM321 - Organic Chemistry (2:30 PM - 3:30 PM)': [
                { id: 'S002', name: 'Bob Williams' }, { id: 'S005', name: 'Ethan Davis' },
                { id: 'S009', name: 'Ivy Lewis' }, { id: 'S012', name: 'Leo Young' },
            ],
        };

        // Mock historical attendance data - now stores IDs
        const mockHistory = {
            'CS101 - Intro to Programming (9:00 AM - 10:00 AM)': [
                { date: '2025-09-05', presentIds: ['S001', 'S002', 'S003', 'S004', 'S005', 'S007'], absentIds: ['S006', 'S008'] },
                { date: '2025-09-03', presentIds: ['S001', 'S002', 'S003', 'S004', 'S005', 'S006', 'S007', 'S008'], absentIds: [] },
                { date: '2025-09-01', presentIds: ['S001', 'S002', 'S003', 'S004', 'S006', 'S007', 'S008'], absentIds: ['S005'] },
            ],
            'MA203 - Linear Algebra (10:30 AM - 11:30 AM)': [
                 { date: '2025-09-04', presentIds: ['S009', 'S010', 'S011'], absentIds: ['S012'] },
                 { date: '2025-09-02', presentIds: ['S009', 'S010', 'S011', 'S012'], absentIds: [] },
            ],
        };
        
        // --- Functions ---

        /**
         * Starts the camera and displays the video feed.
         */
        async function startCamera() {
            try {
                cameraStatus.innerHTML = '<p>Requesting camera access...</p>';
                videoStream = await navigator.mediaDevices.getUserMedia({ 
                    video: { facingMode: 'user' } 
                });
                cameraFeed.srcObject = videoStream;
                cameraFeed.onloadedmetadata = () => {
                    cameraStatus.classList.add('hidden');
                    captureBtn.disabled = false;
                };
            } catch (error) {
                console.error("Error accessing camera:", error);
                cameraStatus.innerHTML = `<p class="text-red-400 p-4 text-center"><i class="fas fa-exclamation-triangle mr-2"></i>Could not access camera.<br>Please check permissions.</p>`;
            }
        }
        
        /**
         * Stops the camera feed.
         */
        function stopCamera() {
            if (videoStream) {
                videoStream.getTracks().forEach(track => track.stop());
                videoStream = null;
                cameraFeed.srcObject = null;
                cameraStatus.classList.remove('hidden');
                cameraStatus.innerHTML = '<p>Camera is off</p>';
                captureBtn.disabled = true;
            }
        }

        /**
         * Simulates capturing a student's attendance.
         */
        function captureAttendance() {
            if (!videoStream) return;
            
            const absentStudents = currentRoster.filter(student => !presentStudents.some(p => p.id === student.id));

            if (absentStudents.length === 0) {
                captureBtn.innerHTML = '<i class="fas fa-check-circle"></i> All Present';
                captureBtn.disabled = true;
                return;
            }

            captureBtn.disabled = true;
            captureBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

            setTimeout(() => {
                const randomIndex = Math.floor(Math.random() * absentStudents.length);
                const recognizedStudent = absentStudents[randomIndex];
                presentStudents.push(recognizedStudent);

                const canvas = document.createElement('canvas');
                canvas.width = cameraFeed.videoWidth;
                canvas.height = cameraFeed.videoHeight;
                const context = canvas.getContext('2d');
                context.drawImage(cameraFeed, 0, 0, canvas.width, canvas.height);
                const dataUrl = canvas.toDataURL('image/jpeg');

                if (noEntriesRow) noEntriesRow.style.display = 'none';
                
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td class="px-4 py-2"><img src="${dataUrl}" alt="Snapshot" class="log-thumbnail"></td>
                    <td class="px-4 py-2 text-sm text-slate-800 font-medium">${recognizedStudent.id}</td>
                    <td class="px-4 py-2 text-sm text-slate-600">${recognizedStudent.name}</td>
                    <td class="px-4 py-2 text-sm text-slate-600">${new Date().toLocaleTimeString()}</td>
                `;
                attendanceLogBody.prepend(newRow);

                captureBtn.disabled = false;
                captureBtn.innerHTML = '<i class="fas fa-id-card"></i> Capture Attendance';

            }, 750);
        }

        /**
         * Calculates and displays the session summary after taking attendance.
         */
        function showSummary() {
            stopCamera();
            attendanceTakingSection.classList.add('hidden');
            
            const absentStudents = currentRoster.filter(student => !presentStudents.some(p => p.id === student.id));
            const presentStudentIds = presentStudents.map(s => s.id);
            const absentStudentIds = absentStudents.map(s => s.id);

            const todaysDate = new Date().toISOString().slice(0, 10);
            const selectedSlot = classSlotSelect.value;
            mockHistory[selectedSlot] = mockHistory[selectedSlot] || [];
            
            const existingIndex = mockHistory[selectedSlot].findIndex(h => h.date === todaysDate);
            if(existingIndex > -1) {
                mockHistory[selectedSlot].splice(existingIndex, 1);
            }
            
            mockHistory[selectedSlot].unshift({
                date: todaysDate,
                presentIds: presentStudentIds,
                absentIds: absentStudentIds
            });
            
            populateSummaryScreen(
                new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }),
                presentStudentIds,
                absentStudentIds
            );
            
            summaryButtons.innerHTML = `
                <button id="view-history-btn" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-blue-700 transition">
                    <i class="fas fa-history mr-2"></i> View Attendance History
                </button>
            `;
            document.getElementById('view-history-btn').addEventListener('click', showHistory);
            sessionSummarySection.classList.remove('hidden');
        }

        /**
         * Populates the summary screen with data (used for both current and historical views).
         * @param {string} dateStr - The date string to display.
         * @param {string[]} presentIds - Array of present student IDs.
         * @param {string[]} absentIds - Array of absent student IDs.
         */
        function populateSummaryScreen(dateStr, presentIds, absentIds) {
            const presentStudentsDetails = currentRoster.filter(s => presentIds.includes(s.id));
            const absentStudentsDetails = currentRoster.filter(s => absentIds.includes(s.id));

            summaryClassInfo.textContent = classSlotSelect.value;
            
            let displayDate = dateStr;
            if (/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
                const [year, month, day] = dateStr.split('-');
                const dateObj = new Date(Date.UTC(year, parseInt(month) - 1, parseInt(day)));
                 displayDate = dateObj.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'UTC' });
            }
            summaryDate.textContent = displayDate;

            presentCountEl.textContent = presentIds.length;
            absentCountEl.textContent = absentIds.length;

            presentStudentsList.innerHTML = presentStudentsDetails.map(s => `<li class="text-slate-700 bg-slate-50 p-2 rounded">${s.name} (${s.id})</li>`).join('') || '<li class="text-slate-400">N/A</li>';
            absentStudentsList.innerHTML = absentStudentsDetails.map(s => `<li class="text-slate-700 bg-slate-50 p-2 rounded">${s.name} (${s.id})</li>`).join('') || '<li class="text-slate-400">N/A</li>';
        }

        /**
         * Displays the attendance history for the selected class.
         */
        function showHistory() {
            sessionSummarySection.classList.add('hidden');
            slotSelectionSection.classList.add('hidden');
            attendanceHistorySection.classList.remove('hidden');
            modifyAttendanceSection.classList.add('hidden');

            const selectedSlot = classSlotSelect.value;
            historyClassInfo.textContent = selectedSlot;
            currentRoster = classRosters[selectedSlot] || [];

            const todaysDate = new Date().toISOString().slice(0, 10);
            const classHistory = mockHistory[selectedSlot] || [];
            const todayRecordExists = classHistory.some(h => h.date === todaysDate);

            if (todayRecordExists) {
                todaysClassBtn.classList.add('hidden');
            } else {
                todaysClassBtn.classList.remove('hidden');
                todaysClassBtn.onclick = showTodaysSummary;
            }

            const historyData = mockHistory[selectedSlot] || [];

            if (historyData.length > 0) {
                 historyLogBody.innerHTML = historyData.map(record => `
                    <tr class="cursor-pointer hover:bg-blue-50" data-date="${record.date}">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900">${record.date}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-green-600 font-semibold">${record.presentIds.length}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-red-600 font-semibold">${record.absentIds.length}</td>
                    </tr>
                 `).join('');
            } else {
                historyLogBody.innerHTML = `<tr><td colspan="3" class="px-6 py-4 text-center text-slate-500">No history available for this class.</td></tr>`;
            }

            document.querySelectorAll('#history-log-body tr[data-date]').forEach(row => {
                row.addEventListener('click', () => showHistoricalSummary(row.dataset.date));
            });
        }

        /**
         * Shows the summary for today, before attendance has been taken.
         */
        function showTodaysSummary() {
            attendanceHistorySection.classList.add('hidden');
            
            const allStudentIds = currentRoster.map(s => s.id);
            
            populateSummaryScreen(
                new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }),
                [], 
                allStudentIds
            );
            
            summaryButtons.innerHTML = `
                <button id="back-to-history-btn" class="bg-slate-500 text-white font-bold py-3 px-8 rounded-lg hover:bg-slate-600 transition">Back to History</button>
                <button id="take-attendance-btn" class="bg-green-600 text-white font-bold py-3 px-8 rounded-lg hover:bg-green-700 transition">
                    <i class="fas fa-camera mr-2"></i>Take Attendance
                </button>
            `;
            document.getElementById('back-to-history-btn').addEventListener('click', showHistory);
            document.getElementById('take-attendance-btn').addEventListener('click', () => {
                sessionSummarySection.classList.add('hidden');
                attendanceTakingSection.classList.remove('hidden');
                currentClassInfo.textContent = classSlotSelect.value;
                startCamera();
            });
            
            sessionSummarySection.classList.remove('hidden');
        }

        /**
         * Shows the summary for a specific date from history.
         * @param {string} date - The date of the record to show (YYYY-MM-DD).
         */
        function showHistoricalSummary(date) {
            const selectedSlot = classSlotSelect.value;
            const classHistory = mockHistory[selectedSlot] || [];
            const record = classHistory.find(h => h.date === date);

            if (record) {
                attendanceHistorySection.classList.add('hidden');
                populateSummaryScreen(date, record.presentIds, record.absentIds);
                
                summaryButtons.innerHTML = `
                    <button id="back-to-history-btn" class="bg-slate-500 text-white font-bold py-3 px-8 rounded-lg hover:bg-slate-600 transition">Back to History</button>
                    <button id="modify-attendance-btn" data-date="${date}" class="bg-yellow-500 text-white font-bold py-3 px-8 rounded-lg hover:bg-yellow-600 transition">Modify Attendance</button>
                `;
                document.getElementById('back-to-history-btn').addEventListener('click', showHistory);
                document.getElementById('modify-attendance-btn').addEventListener('click', (e) => showModifyScreen(e.currentTarget.dataset.date));
                
                sessionSummarySection.classList.remove('hidden');
            }
        }

        /**
         * Displays the screen to modify attendance for a specific date.
         * @param {string} date - The date of the record to modify.
         */
        function showModifyScreen(date) {
            modifyingDate = date;
            const selectedSlot = classSlotSelect.value;
            const record = mockHistory[selectedSlot].find(h => h.date === date);

            if (!record) return;

            sessionSummarySection.classList.add('hidden');
            modifyAttendanceSection.classList.remove('hidden');

            modifyClassInfo.textContent = selectedSlot;
            modifyDate.textContent = date;

            renderModifyLists(record.presentIds, record.absentIds);
        }

        /**
         * Renders the present/absent lists for the modification screen.
         * @param {string[]} presentIds 
         * @param {string[]} absentIds 
         */
        function renderModifyLists(presentIds, absentIds) {
            modifyPresentList.innerHTML = presentIds.map(id => {
                const student = currentRoster.find(s => s.id === id);
                return `<li class="flex justify-between items-center bg-slate-50 p-2 rounded"><span>${student.name}</span><button data-id="${id}" class="move-to-absent-btn text-red-500 hover:text-red-700 text-xs font-bold">MARK ABSENT</button></li>`;
            }).join('');

            modifyAbsentList.innerHTML = absentIds.map(id => {
                const student = currentRoster.find(s => s.id === id);
                return `<li class="flex justify-between items-center bg-slate-50 p-2 rounded"><span>${student.name}</span><button data-id="${id}" class="move-to-present-btn text-green-500 hover:text-green-700 text-xs font-bold">MARK PRESENT</button></li>`;
            }).join('');

            document.querySelectorAll('.move-to-absent-btn').forEach(btn => btn.addEventListener('click', (e) => moveStudent(e.target.dataset.id, 'toAbsent')));
            document.querySelectorAll('.move-to-present-btn').forEach(btn => btn.addEventListener('click', (e) => moveStudent(e.target.dataset.id, 'toPresent')));
        }
        
        /**
         * Handles moving a student between lists in the modify UI.
         * @param {string} studentId 
         * @param {'toPresent' | 'toAbsent'} direction 
         */
        function moveStudent(studentId, direction) {
            const selectedSlot = classSlotSelect.value;
            const record = mockHistory[selectedSlot].find(h => h.date === modifyingDate);
            if (!record) return;

            if (direction === 'toAbsent') {
                record.presentIds = record.presentIds.filter(id => id !== studentId);
                record.absentIds.push(studentId);
            } else {
                record.absentIds = record.absentIds.filter(id => id !== studentId);
                record.presentIds.push(studentId);
            }
            renderModifyLists(record.presentIds, record.absentIds);
        }

        /**
         * Resets the UI to the initial slot selection state.
         */
        function resetToSelection() {
            stopCamera();
            slotSelectionSection.classList.remove('hidden');
            attendanceTakingSection.classList.add('hidden');
            sessionSummarySection.classList.add('hidden');
            attendanceHistorySection.classList.add('hidden');
            modifyAttendanceSection.classList.add('hidden');
            
            const noEntriesRow = document.getElementById('no-entries-row');
            if(noEntriesRow) noEntriesRow.style.display = '';
            attendanceLogBody.innerHTML = `
                <tr id="no-entries-row">
                    <td colspan="4" class="px-4 py-6 text-center text-slate-500">No students marked present yet.</td>
                </tr>
            `;
            classSlotSelect.value = '';
            
            presentStudents = [];
            currentRoster = [];
            captureBtn.disabled = true;
            captureBtn.innerHTML = '<i class="fas fa-id-card"></i> Capture Attendance';
        }

        // --- Event Listeners ---

        startSessionBtn.addEventListener('click', () => {
            const selectedSlot = classSlotSelect.value;
            if (selectedSlot) {
                slotError.classList.add('hidden');
                slotSelectionSection.classList.add('hidden');
                showHistory();
            } else {
                slotError.classList.remove('hidden');
            }
        });

        endSessionBtn.addEventListener('click', showSummary);
        captureBtn.addEventListener('click', captureAttendance);
        homeBtn.addEventListener('click', resetToSelection);
        
        cancelModifyBtn.addEventListener('click', () => {
             showHistoricalSummary(modifyingDate);
             modifyAttendanceSection.classList.add('hidden');
        });

        saveChangesBtn.addEventListener('click', () => {
            modifyAttendanceSection.classList.add('hidden');
            showHistoricalSummary(modifyingDate);
        });

        logoutBtn.addEventListener('click', (e) => {
            e.preventDefault();
            resetToSelection();
        });
        
    </script>
</body>
</html>



